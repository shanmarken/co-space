// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview This file defines a Genkit flow for handling a "Request a Call Back" form submission.
 * It processes the user's request and is designed to notify an internal team to follow up.
 *
 * @exports requestCallback - The main function to trigger the flow.
 * @exports RequestCallbackInput - The input type for the flow.
 * @exports RequestCallbackOutput - The output type for the flow.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Define the input schema for the callback request
const RequestCallbackInputSchema = z.object({
  name: z.string().describe("The user's full name."),
  companyName: z.string().optional().describe("The user's company name (if provided)."),
  email: z.string().email().describe("The user's email address."),
  phoneNumber: z.string().describe("The user's phone number for the callback."),
  workspace: z.string().describe("The type of workspace the user is interested in (e.g., 'Hot Desk')."),
  additionalRequests: z.string().optional().describe("Any additional messages or requests from the user."),
});
export type RequestCallbackInput = z.infer<typeof RequestCallbackInputSchema>;

// Define the output schema for the flow's result
const RequestCallbackOutputSchema = z.object({
  success: z.boolean().describe('Whether the callback request was successfully processed.'),
  message: z.string().describe('A message indicating the status of the request.'),
});
export type RequestCallbackOutput = z.infer<typeof RequestCallbackOutputSchema>;

// Exported function to trigger the callback request flow
export async function requestCallback(input: RequestCallbackInput): Promise<RequestCallbackOutput> {
  return requestCallbackFlow(input);
}

// Define the Genkit prompt for processing the callback request
const requestCallbackPrompt = ai.definePrompt({
  name: 'requestCallbackPrompt',
  input: {schema: RequestCallbackInputSchema},
  output: {schema: RequestCallbackOutputSchema},
  prompt: `You are an internal assistant responsible for handling "Request a Call Back" submissions.

  A user has requested a call back with the following details:
  - Name: {{name}}
  - Company: {{#if companyName}}{{companyName}}{{else}}N/A{{/if}}
  - Email: {{email}}
  - Phone: {{phoneNumber}}
  - Workspace of Interest: {{workspace}}
  - Additional Requests: {{#if additionalRequests}}{{additionalRequests}}{{else}}None{{/if}}

  Your task is to process this request. In a real system, this would trigger a notification to the sales or support team. For this simulation, simply acknowledge that the request has been received and logged.
  
  Return a JSON object confirming the successful processing of the request.
  {
    "success": true,
    "message": "Callback request processed. The team will reach out to the user shortly."
  }
`,
});

// Define the Genkit flow for the callback request
const requestCallbackFlow = ai.defineFlow(
  {
    name: 'requestCallbackFlow',
    inputSchema: RequestCallbackInputSchema,
    outputSchema: RequestCallbackOutputSchema,
  },
  async input => {
    try {
      // In a real application, you might add logic here to:
      // - Save the request to a database (e.g., Firestore)
      // - Send an email or push notification to your sales team
      // - Send an immediate auto-reply email to the user.

      const {output} = await requestCallbackPrompt(input);
      return output!;
    } catch (error: any) {
      console.error('Error processing callback request:', error);
      return {
        success: false,
        message: `Failed to process callback request. ${error.message || 'Unknown error'}`,
      };
    }
  }
);
